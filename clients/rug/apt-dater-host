#!/usr/bin/perl -w

use strict;

my $CFGFILE = '/etc/apt-dater-host.conf';
my $GETROOT = 'sudo';

eval `cat "$CFGFILE"` if (-r $CFGFILE);

my $CMD = shift;
my $ADPROTO = '0.1';

delete($ENV{'LANG'});

die "Don't call this script directly!\n" unless (defined($CMD));
die "Invalid command '$CMD'!\n" unless ($CMD=~/^(refresh|status|upgrade|install|kernel)$/);

if ($CMD eq 'refresh') {
    print "ADPROTO: $ADPROTO\n";
    &do_status;
    &do_kernel;
}
elsif ($CMD eq 'status') {
    print "ADPROTO: $ADPROTO\n";
    &do_status;
    &do_kernel;
}
elsif ($CMD eq 'upgrade') {
    &do_upgrade;
}
elsif ($CMD eq 'install') {
    &do_install(@ARGV);
}
elsif ($CMD eq 'kernel') {
    print "ADPROTO: $ADPROTO\n";
    &do_kernel;
}
else {
    die "Internal error!\n";
}

sub do_status() {
    # retrieve lsb informations
    open(HLSB, "lsb_release -a 2> /dev/null |") or die "Can't fork: $!\n";
    my %lsb;
    while(<HLSB>) {
	chomp;

	$lsb{$1}=$2 if (/^(Distributor ID|Release|Codename):\s+(\S.+)$/);
    }
    close(HLSB);
    print "LSBREL: $lsb{'Distributor ID'}|$lsb{'Release'}|$lsb{'Codename'}\n";

    # get packages which might be upgraded
    my %updates;
    open(HAPT, "$GETROOT rug --terse list-updates |") or die "Can't fork: $!\n";
    while(<HAPT>) {
	chomp;

	$updates{$1} = $2 if (/^.*\|.*\|.*\|([^|]+)\|([^|]+)\|/);
    }
    close(HAPT);

    # get version of installed packages
    my %installed;
    my %status;
    open(HDPKG, "rpm -qa --qf '%{NAME}|%{VERSION}|\n' |") or die "Can't fork: $!\n";
    while(<HDPKG>) {
	chomp;

	next unless (/^(\S+)\|\S+\|/);

	print "STATUS: ";
	print;
	  
	if($updates{$1}) {
	    print 'u=', $updates{$1};
	}
	else {
	    print 'i';
	}

	print "\n";
    }
    close(HDPKG);
}

sub do_upgrade() {
    system("$GETROOT rug update");
}

sub do_install() {
    system("$GETROOT rug install ".join(' ', @_));
}

sub do_kernel() {
    my $infostr = 'KERNELINFO:';
    my $version = `uname -r`;
    chomp($version);

    my $add = '';
    $add = $1 if($version =~ /(-[a-z]+)$/);

    my $pos = 0;

    my $kinstalled;
    my %distri;
    open(HKERNEL, "rpm -q --whatprovides kernel --qf '%{NAME}|%{VERSION}-%{RELEASE}\n' |") or die "Can't fork: $!\n";
    while(<HKERNEL>) {
	chomp;

	if(/^kernel$add\|(.+)/) {
	    my $ver = $1;
	    $distri{$ver.$add} = 1;
	    
	    if(!$kinstalled) {
	        $kinstalled = $ver;
	    }
	    else {
	        $kinstalled = $ver if(&versioncmp($kinstalled, $ver) < 0);
	    }
	}
    }
    close(HKERNEL);

    unless($distri{$version}) {
	print "$infostr 2 $version\n";
	return;
    }

    unless($kinstalled.$add cmp $version) {
	print "$infostr 0 $version\n";
	return;
    }
    print "$infostr 1 $version\n";
}

##
# Taken from Sort::Versions 1.4
# Copyright (c) 1996, Kenneth J. Albanowski.
##
sub versioncmp() {
    my @A = ($_[0] =~ /([-.]|\d+|[^-.\d]+)/g);
    my @B = ($_[1] =~ /([-.]|\d+|[^-.\d]+)/g);

    my ($A, $B);
    while (@A and @B) {
	$A = shift @A;
	$B = shift @B;
	if ($A eq '-' and $B eq '-') {
	    next;
	} elsif ( $A eq '-' ) {
	    return -1;
	} elsif ( $B eq '-') {
	    return 1;
	} elsif ($A eq '.' and $B eq '.') {
	    next;
	} elsif ( $A eq '.' ) {
	    return -1;
	} elsif ( $B eq '.' ) {
	    return 1;
	} elsif ($A =~ /^\d+$/ and $B =~ /^\d+$/) {
	    if ($A =~ /^0/ || $B =~ /^0/) {
		return $A cmp $B if $A cmp $B;
	    } else {
		return $A <=> $B if $A <=> $B;
	    }
	} else {
	    $A = uc $A;
	    $B = uc $B;
	    return $A cmp $B if $A cmp $B;
	}	
    }
    @A <=> @B;
}
