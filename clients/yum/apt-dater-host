#!/usr/bin/perl -w

# apt-dater - terminal-based remote package update manager
#
# $Id$
#
# Authors:
#   Andre Ellguth <ellguth@ibh.de>
#   Thomas Liske <liske@ibh.de>
#
# Copyright Holder:
#   2008-2009 (C) IBH IT-Service GmbH [http://www.ibh.de/apt-dater/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use strict;

my $CFGFILE = '/etc/apt-dater-host.conf';
my $GETROOT = 'sudo';
my $CLEANUP = 0;
my $FORBID_UPGRADE = 0;
my $FORBID_INSTALL = 0;
my $UUIDFILE = '/etc/apt-dater-host.uuid';

eval `cat "$CFGFILE"` if (-r $CFGFILE);

my $CMD = shift;
my $ADPROTO = '0.4';

$ENV{'LC_ALL'} = 'C';

$GETROOT = '' if($> == 0);

die "Don't call this script directly!\n" unless (defined($CMD));
die "Invalid command '$CMD'!\n" unless ($CMD=~/^(refresh|status|upgrade|install|kernel)$/);

if ($CMD eq 'refresh') {
    print "ADPROTO: $ADPROTO\n";
    &do_status;
    &do_kernel;
}
elsif ($CMD eq 'status') {
    print "ADPROTO: $ADPROTO\n";
    &do_status;
    &do_kernel;
}
elsif ($CMD eq 'upgrade') {
    if ($FORBID_UPGRADE) {
	print STDERR "\n\n** Sorry, apt-dater based upgrades on this host are disabled! **\n\n"
    }
    else {
	&do_upgrade;
	&do_cleanup;
    }
}
elsif ($CMD eq 'install') {
    if ($FORBID_INSTALL) {
	print STDERR "\n\n** Sorry, apt-dater based installations on this host are disabled! **\n\n"
    }
    else {
	&do_install(@ARGV);
	&do_cleanup;
    }
}
elsif ($CMD eq 'kernel') {
    print "ADPROTO: $ADPROTO\n";
    &do_kernel;
}
else {
    die "Internal error!\n";
}

sub get_virt() {
    return "Unknown" unless (-x '/usr/bin/imvirt');

    my $imvirt;
    chomp($imvirt = `/usr/bin/imvirt`);

    return $imvirt;
}

sub get_uname() {
    my $kernel;
    my $machine;

    chomp($kernel = `uname -s`);
    chomp($machine = `uname -m`);
    return "$kernel|$machine";
}

sub do_status() {
    # retrieve lsb informations
    open(HLSB, "lsb_release -a 2> /dev/null |") or die "Can't fork: $!\n";
    my %lsb;
    while(<HLSB>) {
	chomp;

	$lsb{$1}=$2 if (/^(Distributor ID|Release|Codename):\s+(\S.*)$/);
    }
    close(HLSB);
    print "LSBREL: $lsb{'Distributor ID'}|$lsb{'Release'}|$lsb{'Codename'}\n";

    # retrieve virtualization informations
    print "VIRT: ".&get_virt."\n";

    # retrieve uname informations
    print "UNAME: ".&get_uname."\n";

    # calculate forbid mask
    my $mask = 0;
#    $mask |= 1 if ($FORBID_REFRESH); NOT SUPPORTED
    $mask |= 2 if ($FORBID_UPGRADE);
    $mask |= 4 if ($FORBID_INSTALL);
    print "FORBID: $mask\n";

    # add installation UUID if available
    if(-r $UUIDFILE && -s $UUIDFILE) {
	print "UUID: ", `head -n 1 "$UUIDFILE"`;
    }


    # get packages which might be upgraded
    my %updates;
    open(HAPT, "$GETROOT yum list updates |") or die "Can't fork: $!\n";
    while(<HAPT>) {
	chomp;

	$updates{$1} = $2 if (/^(\S+)\s+(\d\S*)\s+(\S+)/);
    }
    close(HAPT);

    # get packages which are obsolete (extra - no downloadable version available)
    my %extras;
    open(HYUM, "$GETROOT yum list extras |") or die "Can't fork: $!\n";
    while(<HYUM>) {
	chomp;

	$extras{$1} = $2 if (/^(\S+)\s+(\d\S*)\s+(\S+)/);
    }
    close(HYUM);

    # get version of installed packages
    my %installed;
    my %status;
    open(HDPKG, "$GETROOT yum list installed |") or die "Can't fork: $!\n";
    while(<HDPKG>) {
	chomp;

	next unless (/^(\S+)\s+(\d\S*)\s+(\S+)/);
	$installed{$1} = $2 ;
		
	if($updates{$1}) {
	    $status{$1} = 'u';
	}
	elsif($extras{$1}) {
	    $status{$1} = 'x';
	}
	else {
	    $status{$1} = substr($3, 0, 1);
	}
    }
    close(HDPKG);
    
    foreach my $pkg (keys %installed) {
	print "STATUS: $pkg|$installed{$pkg}|$status{$pkg}";
	if (exists($updates{$pkg})) {
	    print "=$updates{$pkg}" ;
	}
	
	print "\n";
    }
}

sub do_upgrade() {
    system("$GETROOT yum update");
}

sub do_install() {
    system("$GETROOT yum install ".join(' ', @_));
}

sub do_kernel() {
    my $infostr = 'KERNELINFO:';
    my $version = `uname -r`;
    chomp($version);

    my $add = '';
    $add = "-$1" if($version =~ /([a-z]+)$/);

    my $pos = 0;

    my $kinstalled;
    my %distri;
    open(HKERNEL, "$GETROOT yum list 'kernel*' |") or die "Can't fork: $!\n";
    while(<HKERNEL>) {
	chomp;
	
	if(/^Installed Packages/) {
	    $pos = 1;
	    next;
	}
	
	if(/^Available Packages/) {
	    $pos = 2;
	    next;
	}

	if(($pos == 1) && /^(\S+$add\.\S+)\s+(\d\S*)\s/) {
	    my $ver = $2;
	    $distri{$ver.substr($add,1)} = 1;
	    
	    if(!$kinstalled) {
	        $kinstalled = $ver;
	    }
	    else {
	        $kinstalled = $ver if(&versioncmp($kinstalled, $ver) < 0);
	    }
	}
    }
    close(HKERNEL);

    unless($distri{$version}) {
	print "$infostr 2 $version\n";
	return;
    }

    unless($kinstalled.substr($add, 1) cmp $version) {
	print "$infostr 0 $version\n";
	return;
    }
    print "$infostr 1 $version\n";
}

##
# Taken from Sort::Versions 1.4
# Copyright (c) 1996, Kenneth J. Albanowski.
##
sub versioncmp() {
    my @A = ($_[0] =~ /([-.]|\d+|[^-.\d]+)/g);
    my @B = ($_[1] =~ /([-.]|\d+|[^-.\d]+)/g);

    my ($A, $B);
    while (@A and @B) {
	$A = shift @A;
	$B = shift @B;
	if ($A eq '-' and $B eq '-') {
	    next;
	} elsif ( $A eq '-' ) {
	    return -1;
	} elsif ( $B eq '-') {
	    return 1;
	} elsif ($A eq '.' and $B eq '.') {
	    next;
	} elsif ( $A eq '.' ) {
	    return -1;
	} elsif ( $B eq '.' ) {
	    return 1;
	} elsif ($A =~ /^\d+$/ and $B =~ /^\d+$/) {
	    if ($A =~ /^0/ || $B =~ /^0/) {
		return $A cmp $B if $A cmp $B;
	    } else {
		return $A <=> $B if $A <=> $B;
	    }
	} else {
	    $A = uc $A;
	    $B = uc $B;
	    return $A cmp $B if $A cmp $B;
	}	
    }
    @A <=> @B;
}

sub do_cleanup() {
    return unless $CLEANUP;

    system("$GETROOT yum clean packages");
}
