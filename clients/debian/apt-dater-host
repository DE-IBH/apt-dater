#!/usr/bin/perl -w

use strict;

my $CFGFILE = '/etc/apt-dater-host.conf';
my $DPKGTOOL = 'aptitude';
my $GETROOT = 'sudo';

eval `cat "$CFGFILE"` if (-r $CFGFILE);

my $CMD = shift;

delete($ENV{'LANG'});

die "Don't call this script directly!\n" unless (defined($CMD));
die "Invalid command '$CMD'!\n" unless ($CMD=~/^(refresh|status|upgrade|install|kernel)$/);

if ($CMD eq 'refresh') {
    &do_refresh;
    &do_status;
    &do_kernel;
}
elsif ($CMD eq 'status') {
    &do_status;
    &do_kernel;
}
elsif ($CMD eq 'upgrade') {
    &do_upgrade;
}
elsif ($CMD eq 'install') {
    &do_install(@ARGV);
}
elsif ($CMD eq 'kernel') {
    &do_kernel;
}
else {
    die "Internal error!\n";
}


sub do_refresh() {
    system("$GETROOT $DPKGTOOL update");
}

sub do_status() {
    # retrieve lsb informations
    open(HLSB, "lsb_release -a 2> /dev/null |") or die "Can't fork: $!\n";
    my %lsb;
    while(<HLSB>) {
	chomp;

	$lsb{$1}=$2 if (/^(Distributor ID|Release|Codename):\s+(\S.+)$/);
    }
    close(HLSB);
    print "LSBREL: $lsb{'Distributor ID'}|$lsb{'Release'}|$lsb{'Codename'}\n";

    # get packages which might be upgraded
    my %updates;
    my %holds;
    my $pos = 0;
    open(HAPT, "$GETROOT apt-get -q -s upgrade |") or die "Can't fork: $!\n";
    while(<HAPT>) {
	chomp;
	
	if($pos == 0) {
	    $pos=1 if (/^The following packages have been kept back/);
	    $pos=2 if (/^The following packages will be upgraded:/);
	    next;
	}

	if($pos == 1) {
	    unless (/^\s/) {
		$pos++;
		next;
	    }
	    while(/^\s*(\S+)(\s(.+))?$/) {
		$holds{$1} = 1;
		if(defined($2)) {
		    $_ = $2;
		}
		else {
		    $_ = '';
		}
	    }
	}

	$updates{$1} = $2 if (/^Inst (\S+) \[.+\] \((\S+) /);
    }
    close(HAPT);

    # get version of installed packages
    my %installed;
    my %status;
    open(HDPKG, "dpkg-query --show -f '\${Package} \${Version} \${Status}\\n' |") or die "Can't fork: $!\n";
    while(<HDPKG>) {
	chomp;

	next unless (/^(\S+) (\S+) (\S+) (\S+) (\S+)$/);
	$installed{$1} = $2 ;
		
	if($holds{$1}) {
	    $status{$1} = 'h';
	}
	elsif($updates{$1}) {
	    $status{$1} = 'u';
	}
	else {
	    $status{$1} = substr($3, 0, 1);
	}
#	$status{$1} .= substr($5, 0, 1);
    }
    close(HDPKG);
    
    foreach my $pkg (keys %installed) {
	print "STATUS: $pkg|$installed{$pkg}|$status{$pkg}";
	if (exists($updates{$pkg})) {
	    print "=$updates{$pkg}" ;
	}
	
	print "\n";
    }
}

sub do_upgrade() {
    system("$GETROOT $DPKGTOOL upgrade");
}

sub do_install() {
    system("$GETROOT $DPKGTOOL install ".join(' ', @_));
}

sub do_kernel() {
    my $infostr = 'KERNELINFO:';
    my $verfile = '/proc/version';
    my $version = `uname -r`;
    chomp($version);

    unless(-r $verfile) {
	print "$infostr 9 $version\n";
	return;
    }

    unless(`cat /proc/version` =~ /^\S+ \S+ \S+ \(Debian ([^\)]+)\)/) {
	print "$infostr 2 $version\n";
	return;
    }
    my $vers = $1;

    my $reboot = 0;
    open(HDPKG, "dpkg-query -W -f='\${Version} \${Status;20} \${Maintainer}\n' 'linux-image*' | grep 'install ok installed Debian Kernel Team'|") or die "Could not fork: $!\n";
    while(<HDPKG>) {
	next unless (/^(\S+)\s/);
	
	$reboot=1 if (system("dpkg", "--compare-versions", $vers, "lt", $1) >> 8);
    }
    close(HDPKG);

    print "$infostr $reboot $version\n";
}
